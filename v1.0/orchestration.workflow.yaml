version: "1.0.0"
name: "Manus Multi-Agent Engineering Framework Orchestration"
description: "Orchestration workflow pipeline for the MMEF system"

# Global configuration
config:
  default_timeout: 3600  # Default timeout in seconds
  retry_attempts: 3      # Default retry attempts for failed operations
  logging_level: "info"  # Logging level (debug, info, warn, error)

# Event triggers that initiate workflows
event_triggers:
  - id: "repo_initialization"
    description: "New repository initialization"
    source: "github"
    event_type: "repository.created"
    workflow: "project_initialization"
    
  - id: "issue_created"
    description: "New issue created"
    source: "github"
    event_type: "issues.opened"
    workflow: "issue_triage"
    
  - id: "pull_request_opened"
    description: "New pull request opened"
    source: "github"
    event_type: "pull_request.opened"
    workflow: "code_review"
    
  - id: "pull_request_updated"
    description: "Pull request updated with new commits"
    source: "github"
    event_type: "pull_request.synchronize"
    workflow: "code_review"
    
  - id: "comment_on_pr"
    description: "Comment added to pull request"
    source: "github"
    event_type: "issue_comment.created"
    conditions:
      - "event.issue.pull_request != null"
    workflow: "comment_analysis"
    
  - id: "ci_build_completed"
    description: "CI build completed"
    source: "github"
    event_type: "check_suite.completed"
    workflow: "ci_result_processing"
    
  - id: "release_created"
    description: "New release created"
    source: "github"
    event_type: "release.created"
    workflow: "release_deployment"
    
  - id: "manual_architecture_review"
    description: "Manual request for architecture review"
    source: "user"
    event_type: "command.architecture_review"
    workflow: "architecture_review"
    
  - id: "scheduled_security_scan"
    description: "Scheduled security vulnerability scan"
    source: "scheduler"
    event_type: "schedule.daily"
    workflow: "security_scan"

# Workflow definitions
workflows:
  # Project initialization workflow
  - id: "project_initialization"
    name: "Project Initialization"
    description: "Initialize a new project with standard structure and configuration"
    steps:
      - id: "gather_requirements"
        name: "Gather Project Requirements"
        agent: "product_manager"
        action: "create_project_requirements"
        inputs:
          repository_name: "{{ event.repository.name }}"
          repository_description: "{{ event.repository.description }}"
        outputs:
          requirements_document: "project_requirements"
        timeout: 1800
        
      - id: "design_architecture"
        name: "Design Initial Architecture"
        agent: "architect"
        action: "create_initial_architecture"
        inputs:
          project_requirements: "{{ outputs.gather_requirements.requirements_document }}"
        outputs:
          architecture_document: "initial_architecture"
        depends_on: ["gather_requirements"]
        
      - id: "setup_repository"
        name: "Setup Repository Structure"
        agent: "devops"
        action: "initialize_repository"
        inputs:
          architecture_document: "{{ outputs.design_architecture.architecture_document }}"
        outputs:
          repository_structure: "repo_structure"
        depends_on: ["design_architecture"]
        
      - id: "configure_ci_cd"
        name: "Configure CI/CD Pipeline"
        agent: "devops"
        action: "setup_ci_cd"
        inputs:
          repository_structure: "{{ outputs.setup_repository.repository_structure }}"
        outputs:
          ci_cd_configuration: "ci_cd_config"
        depends_on: ["setup_repository"]
        
      - id: "create_initial_documentation"
        name: "Create Initial Documentation"
        agent: "documentation"
        action: "create_project_documentation"
        inputs:
          architecture_document: "{{ outputs.design_architecture.architecture_document }}"
          repository_structure: "{{ outputs.setup_repository.repository_structure }}"
        outputs:
          documentation: "initial_docs"
        depends_on: ["design_architecture", "setup_repository"]
        
      - id: "security_baseline"
        name: "Establish Security Baseline"
        agent: "security"
        action: "create_security_baseline"
        inputs:
          architecture_document: "{{ outputs.design_architecture.architecture_document }}"
        outputs:
          security_guidelines: "security_baseline"
        depends_on: ["design_architecture"]
        
      - id: "project_initialization_summary"
        name: "Generate Project Initialization Summary"
        agent: "product_manager"
        action: "create_initialization_summary"
        inputs:
          requirements_document: "{{ outputs.gather_requirements.requirements_document }}"
          architecture_document: "{{ outputs.design_architecture.architecture_document }}"
          repository_structure: "{{ outputs.setup_repository.repository_structure }}"
          ci_cd_configuration: "{{ outputs.configure_ci_cd.ci_cd_configuration }}"
          documentation: "{{ outputs.create_initial_documentation.documentation }}"
          security_guidelines: "{{ outputs.security_baseline.security_guidelines }}"
        outputs:
          initialization_summary: "project_summary"
        depends_on: ["gather_requirements", "design_architecture", "setup_repository", "configure_ci_cd", "create_initial_documentation", "security_baseline"]

  # Issue triage workflow
  - id: "issue_triage"
    name: "Issue Triage"
    description: "Analyze and route new issues to appropriate agents"
    steps:
      - id: "analyze_issue"
        name: "Analyze Issue Content"
        agent: "product_manager"
        action: "analyze_issue"
        inputs:
          issue_title: "{{ event.issue.title }}"
          issue_body: "{{ event.issue.body }}"
          issue_labels: "{{ event.issue.labels }}"
        outputs:
          issue_analysis: "issue_analysis"
          issue_type: "issue_type"
        
      - id: "route_issue"
        name: "Route Issue to Appropriate Agent"
        agent: "product_manager"
        action: "route_issue"
        inputs:
          issue_analysis: "{{ outputs.analyze_issue.issue_analysis }}"
          issue_type: "{{ outputs.analyze_issue.issue_type }}"
        outputs:
          assigned_agent: "assigned_agent"
          priority: "issue_priority"
        depends_on: ["analyze_issue"]
        
      - id: "bug_investigation"
        name: "Investigate Bug"
        agent: "qa_engineer"
        action: "investigate_bug"
        inputs:
          issue_analysis: "{{ outputs.analyze_issue.issue_analysis }}"
        outputs:
          investigation_results: "bug_investigation"
        depends_on: ["route_issue"]
        conditions:
          - "outputs.analyze_issue.issue_type == 'bug'"
        
      - id: "feature_analysis"
        name: "Analyze Feature Request"
        agent: "product_manager"
        action: "analyze_feature_request"
        inputs:
          issue_analysis: "{{ outputs.analyze_issue.issue_analysis }}"
        outputs:
          feature_analysis: "feature_analysis"
        depends_on: ["route_issue"]
        conditions:
          - "outputs.analyze_issue.issue_type == 'feature'"
        
      - id: "security_assessment"
        name: "Assess Security Issue"
        agent: "security"
        action: "assess_security_issue"
        inputs:
          issue_analysis: "{{ outputs.analyze_issue.issue_analysis }}"
        outputs:
          security_assessment: "security_assessment"
        depends_on: ["route_issue"]
        conditions:
          - "outputs.analyze_issue.issue_type == 'security'"
        
      - id: "create_issue_response"
        name: "Create Issue Response"
        agent: "{{ outputs.route_issue.assigned_agent }}"
        action: "create_issue_response"
        inputs:
          issue_analysis: "{{ outputs.analyze_issue.issue_analysis }}"
          bug_investigation: "{{ outputs.bug_investigation.investigation_results }}"
          feature_analysis: "{{ outputs.feature_analysis.feature_analysis }}"
          security_assessment: "{{ outputs.security_assessment.security_assessment }}"
        outputs:
          issue_response: "issue_response"
        depends_on: ["route_issue", "bug_investigation", "feature_analysis", "security_assessment"]
        required_dependencies: ["route_issue"]

  # Code review workflow
  - id: "code_review"
    name: "Code Review"
    description: "Review code changes in pull requests"
    steps:
      - id: "analyze_pr"
        name: "Analyze Pull Request"
        agent: "reviewer"
        action: "analyze_pull_request"
        inputs:
          pr_title: "{{ event.pull_request.title }}"
          pr_description: "{{ event.pull_request.body }}"
          changed_files: "{{ event.pull_request.changed_files }}"
          diff_url: "{{ event.pull_request.diff_url }}"
        outputs:
          pr_analysis: "pr_analysis"
          review_type: "review_type"
        
      - id: "architecture_review"
        name: "Architecture Review"
        agent: "architect"
        action: "review_architecture_changes"
        inputs:
          pr_analysis: "{{ outputs.analyze_pr.pr_analysis }}"
          diff_url: "{{ event.pull_request.diff_url }}"
        outputs:
          architecture_review: "architecture_review"
        depends_on: ["analyze_pr"]
        conditions:
          - "outputs.analyze_pr.review_type == 'architecture'"
        
      - id: "code_quality_review"
        name: "Code Quality Review"
        agent: "reviewer"
        action: "review_code_quality"
        inputs:
          pr_analysis: "{{ outputs.analyze_pr.pr_analysis }}"
          diff_url: "{{ event.pull_request.diff_url }}"
        outputs:
          code_quality_review: "code_quality_review"
        depends_on: ["analyze_pr"]
        
      - id: "security_review"
        name: "Security Review"
        agent: "security"
        action: "review_security_implications"
        inputs:
          pr_analysis: "{{ outputs.analyze_pr.pr_analysis }}"
          diff_url: "{{ event.pull_request.diff_url }}"
        outputs:
          security_review: "security_review"
        depends_on: ["analyze_pr"]
        conditions:
          - "outputs.analyze_pr.review_type == 'security' or outputs.analyze_pr.review_type == 'architecture'"
        
      - id: "test_coverage_review"
        name: "Test Coverage Review"
        agent: "qa_engineer"
        action: "review_test_coverage"
        inputs:
          pr_analysis: "{{ outputs.analyze_pr.pr_analysis }}"
          diff_url: "{{ event.pull_request.diff_url }}"
        outputs:
          test_coverage_review: "test_coverage_review"
        depends_on: ["analyze_pr"]
        
      - id: "documentation_review"
        name: "Documentation Review"
        agent: "documentation"
        action: "review_documentation"
        inputs:
          pr_analysis: "{{ outputs.analyze_pr.pr_analysis }}"
          diff_url: "{{ event.pull_request.diff_url }}"
        outputs:
          documentation_review: "documentation_review"
        depends_on: ["analyze_pr"]
        conditions:
          - "outputs.analyze_pr.review_type == 'documentation' or 'documentation' in event.pull_request.changed_files"
        
      - id: "compile_review_feedback"
        name: "Compile Review Feedback"
        agent: "reviewer"
        action: "compile_review_feedback"
        inputs:
          pr_analysis: "{{ outputs.analyze_pr.pr_analysis }}"
          architecture_review: "{{ outputs.architecture_review.architecture_review }}"
          code_quality_review: "{{ outputs.code_quality_review.code_quality_review }}"
          security_review: "{{ outputs.security_review.security_review }}"
          test_coverage_review: "{{ outputs.test_coverage_review.test_coverage_review }}"
          documentation_review: "{{ outputs.documentation_review.documentation_review }}"
        outputs:
          compiled_review: "compiled_review"
          approval_status: "approval_status"
        depends_on: ["analyze_pr", "architecture_review", "code_quality_review", "security_review", "test_coverage_review", "documentation_review"]
        required_dependencies: ["analyze_pr", "code_quality_review"]
        
      - id: "submit_review"
        name: "Submit Review"
        agent: "reviewer"
        action: "submit_review"
        inputs:
          compiled_review: "{{ outputs.compile_review_feedback.compiled_review }}"
          approval_status: "{{ outputs.compile_review_feedback.approval_status }}"
          pr_url: "{{ event.pull_request.html_url }}"
        outputs:
          review_submission: "review_submission"
        depends_on: ["compile_review_feedback"]

  # CI result processing workflow
  - id: "ci_result_processing"
    name: "CI Result Processing"
    description: "Process and analyze CI build results"
    steps:
      - id: "analyze_ci_results"
        name: "Analyze CI Results"
        agent: "devops"
        action: "analyze_ci_results"
        inputs:
          check_suite_id: "{{ event.check_suite.id }}"
          check_suite_status: "{{ event.check_suite.status }}"
          check_suite_conclusion: "{{ event.check_suite.conclusion }}"
        outputs:
          ci_analysis: "ci_analysis"
          build_status: "build_status"
        
      - id: "process_test_results"
        name: "Process Test Results"
        agent: "qa_engineer"
        action: "process_test_results"
        inputs:
          ci_analysis: "{{ outputs.analyze_ci_results.ci_analysis }}"
        outputs:
          test_results_summary: "test_results_summary"
        depends_on: ["analyze_ci_results"]
        conditions:
          - "outputs.analyze_ci_results.build_status != 'failed'"
        
      - id: "analyze_build_failure"
        name: "Analyze Build Failure"
        agent: "developer"
        action: "analyze_build_failure"
        inputs:
          ci_analysis: "{{ outputs.analyze_ci_results.ci_analysis }}"
        outputs:
          failure_analysis: "failure_analysis"
          fix_recommendations: "fix_recommendations"
        depends_on: ["analyze_ci_results"]
        conditions:
          - "outputs.analyze_ci_results.build_status == 'failed'"
        
      - id: "update_pr_with_ci_results"
        name: "Update PR with CI Results"
        agent: "devops"
        action: "update_pr_with_ci_results"
        inputs:
          ci_analysis: "{{ outputs.analyze_ci_results.ci_analysis }}"
          test_results_summary: "{{ outputs.process_test_results.test_results_summary }}"
          failure_analysis: "{{ outputs.analyze_build_failure.failure_analysis }}"
          fix_recommendations: "{{ outputs.analyze_build_failure.fix_recommendations }}"
        outputs:
          pr_update: "pr_update"
        depends_on: ["analyze_ci_results", "process_test_results", "analyze_build_failure"]
        required_dependencies: ["analyze_ci_results"]

  # Release deployment workflow
  - id: "release_deployment"
    name: "Release Deployment"
    description: "Deploy a new release to production"
    steps:
      - id: "validate_release"
        name: "Validate Release"
        agent: "qa_engineer"
        action: "validate_release"
        inputs:
          release_tag: "{{ event.release.tag_name }}"
          release_assets: "{{ event.release.assets }}"
          release_body: "{{ event.release.body }}"
        outputs:
          validation_results: "validation_results"
          release_approved: "release_approved"
        
      - id: "security_final_check"
        name: "Final Security Check"
        agent: "security"
        action: "final_security_check"
        inputs:
          release_tag: "{{ event.release.tag_name }}"
          validation_results: "{{ outputs.validate_release.validation_results }}"
        outputs:
          security_approval: "security_approval"
        depends_on: ["validate_release"]
        conditions:
          - "outputs.validate_release.release_approved == true"
        
      - id: "prepare_deployment"
        name: "Prepare Deployment"
        agent: "devops"
        action: "prepare_deployment"
        inputs:
          release_tag: "{{ event.release.tag_name }}"
          validation_results: "{{ outputs.validate_release.validation_results }}"
          security_approval: "{{ outputs.security_final_check.security_approval }}"
        outputs:
          deployment_plan: "deployment_plan"
        depends_on: ["validate_release", "security_final_check"]
        conditions:
          - "outputs.validate_release.release_approved == true"
          - "outputs.security_final_check.security_approval == true"
        
      - id: "execute_deployment"
        name: "Execute Deployment"
        agent: "devops"
        action: "execute_deployment"
        inputs:
          deployment_plan: "{{ outputs.prepare_deployment.deployment_plan }}"
        outputs:
          deployment_results: "deployment_results"
          deployment_success: "deployment_success"
        depends_on: ["prepare_deployment"]
        
      - id: "post_deployment_verification"
        name: "Post-Deployment Verification"
        agent: "qa_engineer"
        action: "verify_deployment"
        inputs:
          deployment_results: "{{ outputs.execute_deployment.deployment_results }}"
        outputs:
          verification_results: "verification_results"
        depends_on: ["execute_deployment"]
        conditions:
          - "outputs.execute_deployment.deployment_success == true"
        
      - id: "update_documentation"
        name: "Update Documentation"
        agent: "documentation"
        action: "update_release_documentation"
        inputs:
          release_tag: "{{ event.release.tag_name }}"
          release_body: "{{ event.release.body }}"
          deployment_results: "{{ outputs.execute_deployment.deployment_results }}"
        outputs:
          updated_documentation: "updated_documentation"
        depends_on: ["execute_deployment"]
        conditions:
          - "outputs.execute_deployment.deployment_success == true"
        
      - id: "deployment_notification"
        name: "Send Deployment Notification"
        agent: "product_manager"
        action: "send_deployment_notification"
        inputs:
          release_tag: "{{ event.release.tag_name }}"
          deployment_results: "{{ outputs.execute_deployment.deployment_results }}"
          verification_results: "{{ outputs.post_deployment_verification.verification_results }}"
        outputs:
          notification_sent: "notification_sent"
        depends_on: ["execute_deployment", "post_deployment_verification"]
        required_dependencies: ["execute_deployment"]

  # Architecture review workflow
  - id: "architecture_review"
    name: "Architecture Review"
    description: "Comprehensive review of system architecture"
    steps:
      - id: "gather_architecture_artifacts"
        name: "Gather Architecture Artifacts"
        agent: "architect"
        action: "gather_architecture_artifacts"
        inputs:
          repository: "{{ event.repository.name }}"
          branch: "{{ event.repository.default_branch }}"
        outputs:
          architecture_artifacts: "architecture_artifacts"
        
      - id: "analyze_architecture"
        name: "Analyze Architecture"
        agent: "architect"
        action: "analyze_architecture"
        inputs:
          architecture_artifacts: "{{ outputs.gather_architecture_artifacts.architecture_artifacts }}"
        outputs:
          architecture_analysis: "architecture_analysis"
        depends_on: ["gather_architecture_artifacts"]
        
      - id: "security_architecture_review"
        name: "Security Architecture Review"
        agent: "security"
        action: "review_security_architecture"
        inputs:
          architecture_artifacts: "{{ outputs.gather_architecture_artifacts.architecture_artifacts }}"
          architecture_analysis: "{{ outputs.analyze_architecture.architecture_analysis }}"
        outputs:
          security_review: "security_architecture_review"
        depends_on: ["gather_architecture_artifacts", "analyze_architecture"]
        
      - id: "performance_architecture_review"
        name: "Performance Architecture Review"
        agent: "developer"
        action: "review_performance_architecture"
        inputs:
          architecture_artifacts: "{{ outputs.gather_architecture_artifacts.architecture_artifacts }}"
          architecture_analysis: "{{ outputs.analyze_architecture.architecture_analysis }}"
        outputs:
          performance_review: "performance_architecture_review"
        depends_on: ["gather_architecture_artifacts", "analyze_architecture"]
        
      - id: "scalability_architecture_review"
        name: "Scalability Architecture Review"
        agent: "devops"
        action: "review_scalability_architecture"
        inputs:
          architecture_artifacts: "{{ outputs.gather_architecture_artifacts.architecture_artifacts }}"
          architecture_analysis: "{{ outputs.analyze_architecture.architecture_analysis }}"
        outputs:
          scalability_review: "scalability_architecture_review"
        depends_on: ["gather_architecture_artifacts", "analyze_architecture"]
        
      - id: "compile_architecture_review"
        name: "Compile Architecture Review"
        agent: "architect"
        action: "compile_architecture_review"
        inputs:
          architecture_analysis: "{{ outputs.analyze_architecture.architecture_analysis }}"
          security_review: "{{ outputs.security_architecture_review.security_review }}"
          performance_review: "{{ outputs.performance_architecture_review.performance_review }}"
          scalability_review: "{{ outputs.scalability_architecture_review.scalability_review }}"
        outputs:
          compiled_review: "compiled_architecture_review"
          recommendations: "architecture_recommendations"
        depends_on: ["analyze_architecture", "security_architecture_review", "performance_architecture_review", "scalability_architecture_review"]
        
      - id: "create_architecture_report"
        name: "Create Architecture Report"
        agent: "documentation"
        action: "create_architecture_report"
        inputs:
          compiled_review: "{{ outputs.compile_architecture_review.compiled_review }}"
          recommendations: "{{ outputs.compile_architecture_review.recommendations }}"
        outputs:
          architecture_report: "architecture_report"
        depends_on: ["compile_architecture_review"]

  # Security scan workflow
  - id: "security_scan"
    name: "Security Vulnerability Scan"
    description: "Scan codebase for security vulnerabilities"
    steps:
      - id: "initialize_security_scan"
        name: "Initialize Security Scan"
        agent: "security"
        action: "initialize_security_scan"
        inputs:
          repository: "{{ event.repository.name }}"
          branch: "{{ event.repository.default_branch }}"
        outputs:
          scan_configuration: "scan_configuration"
        
      - id: "dependency_vulnerability_scan"
        name: "Dependency Vulnerability Scan"
        agent: "security"
        action: "scan_dependencies"
        inputs:
          scan_configuration: "{{ outputs.initialize_security_scan.scan_configuration }}"
        outputs:
          dependency_vulnerabilities: "dependency_vulnerabilities"
        depends_on: ["initialize_security_scan"]
        
      - id: "code_vulnerability_scan"
        name: "Code Vulnerability Scan"
        agent: "security"
        action: "scan_code_vulnerabilities"
        inputs:
          scan_configuration: "{{ outputs.initialize_security_scan.scan_configuration }}"
        outputs:
          code_vulnerabilities: "code_vulnerabilities"
        depends_on: ["initialize_security_scan"]
        
      - id: "infrastructure_vulnerability_scan"
        name: "Infrastructure Vulnerability Scan"
        agent: "devops"
        action: "scan_infrastructure_vulnerabilities"
        inputs:
          scan_configuration: "{{ outputs.initialize_security_scan.scan_configuration }}"
        outputs:
          infrastructure_vulnerabilities: "infrastructure_vulnerabilities"
        depends_on: ["initialize_security_scan"]
        
      - id: "analyze_vulnerabilities"
        name: "Analyze Vulnerabilities"
        agent: "security"
        action: "analyze_vulnerabilities"
        inputs:
          dependency_vulnerabilities: "{{ outputs.dependency_vulnerability_scan.dependency_vulnerabilities }}"
          code_vulnerabilities: "{{ outputs.code_vulnerability_scan.code_vulnerabilities }}"
          infrastructure_vulnerabilities: "{{ outputs.infrastructure_vulnerability_scan.infrastructure_vulnerabilities }}"
        outputs:
          vulnerability_analysis: "vulnerability_analysis"
          critical_vulnerabilities: "critical_vulnerabilities"
        depends_on: ["dependency_vulnerability_scan", "code_vulnerability_scan", "infrastructure_vulnerability_scan"]
        
      - id: "create_security_report"
        name: "Create Security Report"
        agent: "security"
        action: "create_security_report"
        inputs:
          vulnerability_analysis: "{{ outputs.analyze_vulnerabilities.vulnerability_analysis }}"
          critical_vulnerabilities: "{{ outputs.analyze_vulnerabilities.critical_vulnerabilities }}"
        outputs:
          security_report: "security_report"
        depends_on: ["analyze_vulnerabilities"]
        
      - id: "create_security_issues"
        name: "Create Security Issues"
        agent: "security"
        action: "create_security_issues"
        inputs:
          vulnerability_analysis: "{{ outputs.analyze_vulnerabilities.vulnerability_analysis }}"
          critical_vulnerabilities: "{{ outputs.analyze_vulnerabilities.critical_vulnerabilities }}"
        outputs:
          created_issues: "created_security_issues"
        depends_on: ["analyze_vulnerabilities"]
        conditions:
          - "outputs.analyze_vulnerabilities.critical_vulnerabilities > 0"

  # Comment analysis workflow
  - id: "comment_analysis"
    name: "Comment Analysis"
    description: "Analyze and respond to comments on issues and PRs"
    steps:
      - id: "analyze_comment"
        name: "Analyze Comment"
        agent: "product_manager"
        action: "analyze_comment"
        inputs:
          comment_body: "{{ event.comment.body }}"
          issue_number: "{{ event.issue.number }}"
          is_pr: "{{ event.issue.pull_request != null }}"
        outputs:
          comment_analysis: "comment_analysis"
          comment_type: "comment_type"
          requires_response: "requires_response"
        
      - id: "technical_question_response"
        name: "Respond to Technical Question"
        agent: "developer"
        action: "respond_to_technical_question"
        inputs:
          comment_analysis: "{{ outputs.analyze_comment.comment_analysis }}"
        outputs:
          technical_response: "technical_response"
        depends_on: ["analyze_comment"]
        conditions:
          - "outputs.analyze_comment.comment_type == 'technical_question'"
          - "outputs.analyze_comment.requires_response == true"
        
      - id: "clarification_response"
        name: "Respond to Clarification Request"
        agent: "product_manager"
        action: "respond_to_clarification"
        inputs:
          comment_analysis: "{{ outputs.analyze_comment.comment_analysis }}"
        outputs:
          clarification_response: "clarification_response"
        depends_on: ["analyze_comment"]
        conditions:
          - "outputs.analyze_comment.comment_type == 'clarification'"
          - "outputs.analyze_comment.requires_response == true"
        
      - id: "review_feedback_response"
        name: "Respond to Review Feedback"
        agent: "reviewer"
        action: "respond_to_review_feedback"
        inputs:
          comment_analysis: "{{ outputs.analyze_comment.comment_analysis }}"
        outputs:
          review_response: "review_response"
        depends_on: ["analyze_comment"]
        conditions:
          - "outputs.analyze_comment.comment_type == 'review_feedback'"
          - "outputs.analyze_comment.requires_response == true"
        
      - id: "post_response"
        name: "Post Response Comment"
        agent: "product_manager"
        action: "post_response_comment"
        inputs:
          comment_analysis: "{{ outputs.analyze_comment.comment_analysis }}"
          technical_response: "{{ outputs.technical_question_response.technical_response }}"
          clarification_response: "{{ outputs.clarification_response.clarification_response }}"
          review_response: "{{ outputs.review_feedback_response.review_response }}"
          issue_number: "{{ event.issue.number }}"
        outputs:
          response_posted: "response_posted"
        depends_on: ["analyze_comment", "technical_question_response", "clarification_response", "review_feedback_response"]
        required_dependencies: ["analyze_comment"]
        conditions:
          - "outputs.analyze_comment.requires_response == true"

# Integration configurations
integrations:
  github:
    api_version: "v3"
    events:
      - "repository"
      - "issues"
      - "issue_comment"
      - "pull_request"
      - "check_suite"
      - "release"
    
  external_tools:
    - name: "v0.dev"
      type: "frontend_generation"
      integration_point: "ux_designer"
      configuration:
        api_endpoint: "https://api.v0.dev"
    
    - name: "mgx.dev"
      type: "code_generation"
      integration_point: "developer"
      configuration:
        api_endpoint: "https://api.mgx.dev"

# Metrics and monitoring
metrics:
  workflow_execution_time:
    description: "Time taken to execute each workflow"
    unit: "seconds"
    
  agent_response_time:
    description: "Time taken for agents to respond to requests"
    unit: "seconds"
    
  workflow_success_rate:
    description: "Percentage of workflows that complete successfully"
    unit: "percentage"
    
  agent_accuracy:
    description: "Accuracy of agent outputs based on feedback"
    unit: "percentage"

# Governance rules
governance:
  approval_requirements:
    production_deployment:
      required_approvers: ["architect", "security"]
      minimum_approvals: 2
    
    architecture_changes:
      required_approvers: ["architect"]
      minimum_approvals: 1
    
    security_changes:
      required_approvers: ["security"]
      minimum_approvals: 1
  
  quality_gates:
    code_review:
      minimum_reviewers: 1
      test_coverage_threshold: 80
      
    release:
      required_checks: ["security_scan", "integration_tests", "performance_tests"]
      zero_critical_vulnerabilities: true
